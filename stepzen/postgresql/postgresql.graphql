type Post {
  created_at: DateTime
  id: ID!
  relative: Relative
    @materializer(
      query: "getRelative"
      arguments: [{ name: "id", field: "relative_to" }]
    )
  relativeList: [Relative] @materializer(query: "getRelativeUsingPost_id")
  relative_to: ID
  text: String
  username: String
}

type Relative {
  created_at: DateTime
  id: ID!
  name: String
  post: Post
    @materializer(
      query: "getPost"
      arguments: [{ name: "id", field: "post_id" }]
    )
  postList: [Post] @materializer(query: "getPostUsingRelative_to")
  post_id: ID
}

"""
These are some examples of queries generated from the schema. Feel free to modify them or add your own.
"""
type Query {
  getPostList: [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  getPost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  getRelativeUsingPost_id(id: ID!): [Relative]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."created_at", T."id", T."name", T."post_id"
        FROM "public"."relative" T
        WHERE T."post_id" = $1
      """
      configuration: "postgresql_config"
    )
  getRelativeList: [Relative]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "relative"
      configuration: "postgresql_config"
    )
  getRelative(id: ID!): Relative
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "relative"
      configuration: "postgresql_config"
    )
  getPostUsingRelative_to(id: ID!): [Post]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."created_at", T."id", T."relative_to", T."text", T."username"
        FROM "public"."post" T
        WHERE T."relative_to" = $1
      """
      configuration: "postgresql_config"
    )
}

"""
These are some examples of mutations generated from the schema. Feel free to modify them or add your own.
"""
type Mutation {
  insertPost(
    text: String!
    created_at: DateTime!
    relative_to: ID!
    username: String!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deletePost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertRelative(created_at: DateTime!, post_id: ID!, name: String!): Relative
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "relative"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteRelative(id: ID!): Relative
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "relative"
      dml: DELETE
      configuration: "postgresql_config"
    )
}
